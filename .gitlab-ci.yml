image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind


before_script:
  - apk update && apk add curl bash


codequality:
  script:
  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" |
      sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  - docker run 
      --env CODECLIMATE_CODE="/tmp${CI_PROJECT_DIR}/${CI_COMMIT_REF_NAME}" 
      --volume "/tmp${CI_PROJECT_DIR}/${CI_COMMIT_REF_NAME}":/code 
      --volume /var/run/docker.sock:/var/run/docker.sock 
      --volume /tmp/cc:/tmp/cc 
      codeclimate/codeclimate analyze
      -e sonar-python
      -e pep8
      -e randon
      -f json > codeclimate.json || true
  retry: 2
  artifacts:
    paths: [codeclimate.json]

stages:
  - deps
  - terraform
  - build
  - review
  - test
  - deploy
  - post-deploy
  - cleanup

Build:
  stage: deps
  before_script:
    - mkdir -p /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
    - cp -a ${CI_PROJECT_DIR} /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src
  script:
    - echo "$DOCKER_PASS" |
        docker login "$CI_REGISTRY" -u "$DOCKER_USER" --password-stdin
    - docker build
        --cache-from "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:deps"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:deps"
        deploy/containers/deps
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:deps"
    - grep ^DEBUG fluidintegrates/settings.py | grep -q False
    - docker logout "$CI_REGISTRY"
  retry: 2
  except:
    - triggers

terraform-test:
  stage: terraform
  before_script:
    - echo acc_key = \"$FI_AWS_DYNAMODB_ACCESS_KEY\" >> deploy/terraform.tfvars
    - echo sec_key = \"$FI_AWS_DYNAMODB_SECRET_KEY\" >> deploy/terraform.tfvars
    - cd deploy
  script:
    - terraform init
    - terraform plan
  except:
    - triggers
    - master

terraform-deploy:
  stage: terraform
  before_script:
    - pip install boto3
    - echo acc_key = \"$FI_AWS_DYNAMODB_ACCESS_KEY\" >> deploy/terraform.tfvars
    - echo sec_key = \"$FI_AWS_DYNAMODB_SECRET_KEY\" >> deploy/terraform.tfvars
    - aws s3 cp
        s3://$BUCKET_NAME/terraform/integrates/terraform.tfstate
        deploy/terraform.tfstate || export NEW_DEPLOY=true
    - cd deploy
  script:
    - terraform init
    - terraform apply -auto-approve
    - if [ -n "${NEW_DEPLOY}" ];
        then python migratedynamo.py
        $FI_AWS_DYNAMODB_ACCESS_KEY
        $FI_AWS_DYNAMODB_SECRET_KEY
        $OLD_FI_AWS_DYNAMODB_ACCESS_KEY
        $OLD_FI_AWS_DYNAMODB_SECRET_KEY;
        fi
  after_script:
    - aws s3 cp
        deploy/terraform.tfstate
        s3://$BUCKET_NAME/terraform/integrates/terraform.tfstate
  only:
    - master
  except:
    - triggers

build-integrates:
  stage: build
  script:
    - echo "$DOCKER_PASS" |
        docker login "$CI_REGISTRY" -u "$DOCKER_USER" --password-stdin
    - cd deploy/containers/integrates &&
        sh build.sh 
        "$CI_COMMIT_REF_NAME" "$TORUS_TOKEN_ID" "$TORUS_TOKEN_SECRET"
        "$TORUS_ORG" "$TORUS_PROJECT"
    - docker push
        "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
    - docker logout "$CI_REGISTRY"
  retry: 2
  except:
    - triggers

build-bot:
  stage: build
  script:
    - echo "$DOCKER_PASS" |
        docker login "$CI_REGISTRY" -u "$DOCKER_USER" --password-stdin
    - cd deploy/containers/bot &&
      sh build.sh
      "$CI_COMMIT_REF_NAME" "$TORUS_TOKEN_ID" "$TORUS_TOKEN_SECRET"
        "$TORUS_ORG" "$TORUS_PROJECT"
    - docker push
      "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/bot:$CI_COMMIT_REF_NAME"
    - docker logout "$CI_REGISTRY"
  retry: 2
  except:
    - triggers

review-integrates:
  stage: review
  image: lwolf/kubectl_deployer
  script:
    - ./review-apps/cluster-config.sh
  retry: 2
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.$ENV_DNS"
    on_stop: stop-review
  except:
    - master
    - trigger

stop-review:
  stage: review
  image: lwolf/kubectl_deployer
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "Stopping Review Apps environment..."
  script:
    - kubectl config set-context
        "$(kubectl config current-context)"
        --namespace="$CI_PROJECT_NAME"
    - kubectl delete deployment "review-$CI_COMMIT_REF_SLUG"
    - kubectl delete service "service-$CI_COMMIT_REF_SLUG"
    - kubectl get ingress "ingress-$CI_PROJECT_NAME" -o yaml |
        sed '/host:\ '"$CI_COMMIT_REF_SLUG"'/,+5d' |
        sed '/-\ '"$CI_COMMIT_REF_SLUG"'/d' > current-ingress.yaml
    - kubectl delete ingress "ingress-$CI_PROJECT_NAME"
    - if kubectl get deployments | grep 'review-*';
        then kubectl create -f current-ingress.yaml;
        fi
  retry: 2
  after_script:
    - echo "Job finished"
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  except:
    - master

Asserts-Review:
  stage: test
  script:
    - echo "$JFROG_PASS" |
        docker login fluid-docker.jfrog.io -u "$JFROG_USER" --password-stdin
    - docker pull fluid-docker.jfrog.io/fluid:integrates
    - docker run
        --rm -e BRANCH="$CI_COMMIT_REF_SLUG"
        -e STAGE=review -e ORG=fluid
        -e APP=integrates -e USER="$JFROG_USER"
        -e PASS="$JFROG_PASS" -e FA_STRICT="true"
        --volume /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src:/code
        fluid-docker.jfrog.io/fluid:integrates
    - docker logout fluid-docker.jfrog.io
  retry: 2
  except:
    - master
    - triggers

Linting:
  stage: test
  script:
    - docker login "$CI_REGISTRY" -u $DOCKER_USER -p $DOCKER_PASS
    - docker run
        -e TORUS_TOKEN_SECRET="$TORUS_TOKEN_SECRET"
        -e TORUS_TOKEN_ID="$TORUS_TOKEN_ID"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "npm install -g  n; n stable;
        cd /usr/src/app/app/assets/app/;
        torus daemon start; sleep 5;
        torus run -- /usr/src/app/app/assets/node_modules/.bin/gulp verbose"
    - docker run
        -e TORUS_TOKEN_SECRET="$TORUS_TOKEN_SECRET"
        -e TORUS_TOKEN_ID="$TORUS_TOKEN_ID"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "npm install -g  n; n stable;
        torus daemon start; sleep 5;
        torus run -- node /usr/src/app/app/assets/node_modules/.bin/eslint
        /usr/src/app/app/assets/app/."
    - docker logout "$CI_REGISTRY"
  retry: 2
  except:
    - master
    - triggers

Prospector:
  stage: test
  script:
    - echo "$DOCKER_PASS" |
        docker login "$CI_REGISTRY" -u "$DOCKER_USER" --password-stdin
    - docker run
        -e TORUS_TOKEN_SECRET="$TORUS_TOKEN_SECRET"
        -e TORUS_TOKEN_ID="$TORUS_TOKEN_ID"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "torus daemon start; sleep 5;
        torus run -- prospector -u django -p /usr/src/app/app -i node_modules"
    - docker run
        -e TORUS_TOKEN_SECRET="$TORUS_TOKEN_SECRET"
        -e TORUS_TOKEN_ID="$TORUS_TOKEN_ID"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "torus daemon start; sleep 5;
        torus run -- prospector -u django /usr/src/app/fluidintegrates"
    - docker run
        -e TORUS_TOKEN_SECRET="$TORUS_TOKEN_SECRET"
        -e TORUS_TOKEN_ID="$TORUS_TOKEN_ID"
        -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "torus daemon start; sleep 5;
        torus run -- python /usr/src/app/manage.py test app.tests"
    - docker logout "$CI_REGISTRY"
  retry: 2
  except:
    - master
    - triggers

Deploy:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client curl
    - aws s3 cp
        s3://$BUCKET_NAME/terraform/FLUID_Serves.pem
        FLUID_Serves.pem &&
        chmod 600 FLUID_Serves.pem
  script:
    - ssh
        -o StrictHostKeyChecking=no
        -i FLUID_Serves.pem
        admin@fluidattacks.com
        'sudo docker pull
        registry.gitlab.com/fluidsignal/integrates:master &&
        sudo docker stop integrates &&
        sudo docker rm integrates &&
        sudo docker run
        -d -p 8000:443 --name=integrates
        -e TORUS_TOKEN_SECRET='"$TORUS_TOKEN_SECRET"'
        -e TORUS_TOKEN_ID='"$TORUS_TOKEN_ID"'
        registry.gitlab.com/fluidsignal/integrates:master'
    - ssh
        -o StrictHostKeyChecking=no
        -i FLUID_Serves.pem
        admin@fluidattacks.com
        'sudo docker pull
        registry.gitlab.com/fluidsignal/integrates/bot:master &&
        sudo docker stop bot &&
        sudo docker rm bot &&
        sudo docker run
        -d --restart always --name=bot
        -e TORUS_TOKEN_SECRET='"$TORUS_TOKEN_SECRET"'
        -e TORUS_TOKEN_ID='"$TORUS_TOKEN_ID"'
        registry.gitlab.com/fluidsignal/integrates/bot:master'
    - curl https://api.rollbar.com/api/1/deploy/
        -F access_token=$FI_ROLLBAR_ACCESS_TOKEN
        -F environment=$FI_ROLLBAR_ENVIRONMENT
        -F revision=$CI_COMMIT_SHA
        -F local_username="$CI_COMMIT_REF_NAME"
  retry: 2
  only:
    - master
  except:
    - triggers

asserts-prod:
  stage: post-deploy
  script:
    - echo "$JFROG_PASS" |
        docker login fluid-docker.jfrog.io -u "$JFROG_USER" --password-stdin
    - docker pull fluid-docker.jfrog.io/fluid:integrates
    - docker run
        --rm -e ORG=fluid -e STAGE=post-deploy
        -e APP=integrates -e USER="$JFROG_USER"
        -e PASS="$JFROG_PASS" -e FA_STRICT="true"
        --volume /tmp${CI_PROJECT_DIR}/${CI_COMMIT_REF_NAME}:/code
        fluid-docker.jfrog.io/fluid:integrates
    - docker logout fluid-docker.jfrog.io
  retry: 2
  only:
    - master

cleanup-code:
  stage: cleanup
  script:
    - rm -rf /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
  when: always