image: registry.gitlab.com/fluidsignal/serves:builder

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:dind

before_script:
  - export DOCKER_BASENAME="fluid-docker.jfrog.io/integrates"
  - echo "$JFROG_PASS" |
      docker login "fluid-docker.jfrog.io" -u "$JFROG_USER" --password-stdin

after_script:
  - docker logout "fluid-docker.jfrog.io" || echo 'Docker not necessary'

.variables-dev: &variables-dev
  variables:
    ENV: DEV
    ENV_FULL: development

.vault_login: &vault_login
  before_script:
    - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
        export ENV=PROD;
        export ENV_FULL=production;
        echo 'Variables updated';
      fi
    - ROLE_ID='INTEGRATES_'"$ENV"'_ROLE_ID'
    - SECRET_ID='INTEGRATES_'"$ENV"'_SECRET_ID'
    - export VAULT_TOKEN=$(curl --request POST
        --data '{"role_id":"'"${!ROLE_ID}"'","secret_id":"'"${!SECRET_ID}"'"}'
        "https://$VAULT_S3_BUCKET.com/v1/auth/approle/login" |
        jq -r '.auth.client_token')
    - export VAULT_HOST="$VAULT_S3_BUCKET.com"
    - export VAULT_PORT=443
    - export VAULTENV_SECRETS_FILE="$CI_PROJECT_DIR/env.vars"
    - sed -i 's/env#/'"$ENV_FULL"'#/g' "$VAULTENV_SECRETS_FILE"
    - export DOCKER_BASENAME="fluid-docker.jfrog.io/integrates"
    - echo "$JFROG_PASS" |
        docker login "fluid-docker.jfrog.io" -u "$JFROG_USER" --password-stdin ||
        echo 'Docker not necessary'

stages:
  - deps
  - pre-test
  - build
  - review
  - mr-check
  - deploy
  - post-deploy
  - coverage

Build:
  stage: deps
  script:
    - cp front/package.json deploy/containers/deps/
    - docker build --no-cache
        -t "$DOCKER_BASENAME:deps190201"
        deploy/containers/deps
    - docker push "$DOCKER_BASENAME:deps190201"
  retry: 2
  only:
    - schedules

.terraform-test:
  stage: pre-test
  <<: *variables-dev
  <<: *vault_login
  script:
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/integrates/terraform.tfstate
        deploy/
    - cd deploy
    - terraform init
    - vaultenv $(which terraform) plan
  except:
    - triggers
    - master

gulp-compiler:
 stage: pre-test
 before_script:
   - echo "Start gulp compiler"
 image: fluid-docker.jfrog.io/integrates:deps190201
 script:
   - cd app/assets && npm install --unsafe-perm
   - cd ../../front
   - npm install --unsafe-perm
   - gulp integrates
 after_script:
   - echo "Job finished"
 retry: 2
 except:
   - master
   - triggers

commitlint:
  stage: pre-test
  before_script:
    - npm install --unsafe-perm
  image: starefossen/ruby-node:2-10
  script:
    - ./ci-scripts/commitlint-checks.sh
  except:
    - master

react-testing:
  stage: pre-test
  only:
    - /^.*$/
    - merge_requests
  image: fluid-docker.jfrog.io/integrates:deps190201
  before_script:
    - echo "Start Unit Testing"
  <<: *variables-dev
  <<: *vault_login
  script:
    - cd front/ && npm install --unsafe-perm
    - tslint -p tsconfig.json -t verbose || true
    - npm test
    - tsc -p tsconfig.json || true
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - front/coverage.lcov
  after_script:
    - echo "Job finished"

js-linter:
  stage: pre-test
  before_script:
    - echo "JS Linting"
  image: fluid-docker.jfrog.io/integrates:deps190201
  script:
    - eslint app/assets/app/.
  after_script:
    - echo "Job finished"
  retry: 2
  except:
    - master
    - triggers

prospector-testing:
  stage: pre-test
  image: fluid-docker.jfrog.io/integrates:deps190201
  <<: *variables-dev
  <<: *vault_login
  script:
    - vaultenv -- $(which prospector) -F -s veryhigh -u django -p app/ -i node_modules || true
    - vaultenv -- $(which prospector) -F -s high -u django -p app/ -i node_modules
    - vaultenv -- $(which prospector) -F -s veryhigh -u django fluidintegrates/
  except:
    - master
    - triggers

unit-testing:
  stage: pre-test
  only:
    - /^.*$/
    - merge_requests
  image: fluid-docker.jfrog.io/integrates:deps190201
  <<: *variables-dev
  <<: *vault_login
  script:
    - cp -a $PWD /usr/src/app_src
    - cd /usr/src/app_src
    - vaultenv -- $(which pytest) --ds=fluidintegrates.settings --verbose --exitfirst
      --cov=fluidintegrates --cov=app --cov-report term
      --cov-report html:build/coverage/html
      --cov-report xml:build/coverage/results.xml
      --cov-report annotate:build/coverage/annotate
      --basetemp=build/test
      --junitxml=build/test/results.xml
      app/tests.py
    - cp -a build/coverage/results.xml /builds/fluidattacks/integrates/coverage.xml
  artifacts:
    name: "coverage_xml_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - coverage.xml

asserts-code-test:
  stage: pre-test
  before_script:
    - CODE_PATH=/tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
    - mkdir -p ${CODE_PATH}
    - cp -a ${CI_PROJECT_DIR} ${CODE_PATH}/src
    - pip install pre-commit
    - sed -i 's#CODE_PATH#'"${CODE_PATH}"'#' .pre-commit-config.yaml
  script:
    - pre-commit run --all-files
  after_script:
    - echo 'Code check complete!'
  except:
    - master
    - triggers

.terraform-deploy:
  stage: build
  <<: *vault_login
  script:
    - pip install boto3==1.8.9
    - aws s3 cp
        s3://$FS_S3_BUCKET_NAME/terraform/integrates/terraform.tfstate
        deploy/terraform.tfstate || export NEW_DEPLOY=true
    - cd deploy
    - export TF_VAR_dynamo_access_key="$(vault read
        -field=aws_dynamodb_access_key secret/integrates/production)"
    - export TF_VAR_dynamo_secret_key="$(vault read
        -field=aws_dynamodb_secret_key secret/integrates/production)"
    - terraform init
    - terraform apply -auto-approve
    - if [ -n "${NEW_DEPLOY}" ];
        then python migratedynamo.py
        $FI_AWS_DYNAMODB_ACCESS_KEY
        $FI_AWS_DYNAMODB_SECRET_KEY
        $OLD_FI_AWS_DYNAMODB_ACCESS_KEY
        $OLD_FI_AWS_DYNAMODB_SECRET_KEY;
        fi
  after_script:
    - aws s3 cp
        deploy/terraform.tfstate
        s3://$FS_S3_BUCKET_NAME/terraform/integrates/terraform.tfstate
  only:
    - master
  except:
    - triggers

build-integrates:
  stage: build
  <<: *variables-dev
  <<: *vault_login
  script:
    - pip2 install gitpython mandrill
    - vaultenv deploy/containers/integrates/build.sh "$CI_COMMIT_REF_NAME"
    - docker push "$DOCKER_BASENAME:$CI_COMMIT_REF_NAME"
  retry: 2
  except:
    - triggers

build-bot:
  stage: build
  <<: *variables-dev
  <<: *vault_login
  script:
    - vaultenv deploy/containers/bot/build.sh "$CI_COMMIT_REF_NAME"
    - docker push "${DOCKER_BASENAME}-bot:${CI_COMMIT_REF_NAME}"
  retry: 2
  except:
    - triggers

remove-cache-keys:
  stage: review
  image: fluid-docker.jfrog.io/integrates:deps190201
  <<: *variables-dev
  <<: *vault_login
  script:
    - vaultenv ./remove_keys.sh
  except:
    - master
    - trigger

driver-testing:
  stage: post-deploy
  image: fluid-docker.jfrog.io/integrates:deps190201
  <<: *variables-dev
  <<: *vault_login
  script:
    - cp -a $PWD /usr/src/app_src
    - cd /usr/src/app_src
    - mkdir -p screenshots
    - vaultenv -- $(which pytest) --ds=fluidintegrates.settings --verbose --exitfirst
      --basetemp=build/test
      app/ephimeral_tests.py
    - cp -a screenshots /builds/fluidattacks/integrates/
  retry: 2
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - screenshots/

review-integrates:
  stage: review
  <<: *variables-dev
  <<: *vault_login
  script:
    - vaultenv review-apps/cluster-config.sh
  retry: 2
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.env.fluidattacks.com"
    on_stop: stop-review
  except:
    - master
    - trigger

stop-review:
  stage: review
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "Stopping Review Apps environment..."
  script:
    - kubectl config set-context
        "$(kubectl config current-context)"
        --namespace="${CI_PROJECT_NAME}"
    - kubectl delete deployment "review-${CI_COMMIT_REF_SLUG}"
    - kubectl delete service "service-${CI_COMMIT_REF_SLUG}"
    - kubectl get ingress "${CI_PROJECT_NAME}-review" -o yaml |
        sed '/host:\ '"$CI_COMMIT_REF_SLUG"'/,+5d' |
        sed '/-\ '"$CI_COMMIT_REF_SLUG"'/d' > current-ingress.yaml
    - kubectl delete ingress "${CI_PROJECT_NAME}-review"
    - if kubectl get deployments | grep 'review-*';
        then kubectl create -f current-ingress.yaml;
        fi
  retry: 2
  after_script:
    - echo "Job finished"
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  except:
    - master

Asserts-Review:
  stage: post-deploy
  script:
    - echo "$JFROG_PASS" |
        docker login fluid-docker.jfrog.io -u "$JFROG_USER" --password-stdin
    - docker pull fluid-docker.jfrog.io/fluid:integrates
    - docker run -t
        --rm -e BRANCH="$CI_COMMIT_REF_SLUG"
        -e STAGE=review -e ORG=fluid
        -e APP=integrates -e USER="$JFROG_USER"
        -e PASS="$JFROG_PASS" -e FA_STRICT="true"
        --volume /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src:/code
        fluid-docker.jfrog.io/fluid:integrates
    - docker logout fluid-doc"$PWD:/code"ker.jfrog.io
  retry: 2
  after_script:
    - rm -rf /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
  except:
    - master
    - triggers

Linting:
  stage: post-deploy
  script:
    - docker run -t "$DOCKER_BASENAME:$CI_COMMIT_REF_NAME"
        /bin/bash -c "npm install --unsafe-perm -g  n; n stable;
        cd /usr/src/app/app/assets/app/;
        result=$(/usr/src/app/app/assets/node_modules/.bin/gulp verbose | grep -c JSC_);
        if [ "$result" -gt 0 ]; then /usr/src/app/app/assets/node_modules/.bin/gulp   verbose;
        echo -e '\e[31mThere are some errors/warnings unsolved.\e[0m';exit 1;
        else echo -e '\e[32mAll Good!'; exit 0; fi;"
  retry: 2
  except:
    - master
    - triggers

mr-test:
  stage: mr-check
  only:
    - merge_request3.86.193.211s
  variables:
    GIT_STRATEGY: clone
  script:
    ./ci-scripts/check-branch.sh

danger:
  stage: mr-check
  only:
    - merge_requests
  variables:
    DANGER_GITLAB_API_TOKEN: ${DANGER_TOKEN}
    DANGER_GITLAB_HOST: "gitlab.com"
    DANGER_GITLAB_API_BASE_URL: "https://gitlab.com/api/v4"
  before_script:
    - export CI_MERGE_REQUEST_ID=$(git ls-remote -q origin merge-requests\*\head
      | grep ${CI_COMMIT_SHA}
      | sed 's/.*refs\/merge-requests\/\([0-9]*\)\/head/\1/g')
    - npm install --unsafe-perm
    - bundle install
  image: starefossen/ruby-node:2-10
  script:
    - bundle exec danger --verbose --fail-on-errors=true

deploy-k8s:
  stage: deploy
  environment:
    name: "production"
    url: "https://fluidattacks.com/integrates"
  <<: *vault_login
  script:
    - kubectl config set-context "$(kubectl config current-context)"
        --namespace serves
    - if ! kubectl get secret jfrog-reg; then
        echo "Creating secret to access Gitlab Registry...";
        kubectl create secret docker-registry jfrog-reg
          --docker-server="fluid-docker.jfrog.io" --docker-username="$JFROG_USER"
          --docker-password="$JFROG_PASS" --docker-email="$JFROG_EMAIL";
      fi
    - sed -i 's/$VAULT_HOST/'"$(echo -n $VAULT_HOST | base64)"'/;
        s/$VAULT_TOKEN/'"$(echo -n $VAULT_TOKEN | base64)"'/;
        s/$DATE/'"$(date)"'/g'
        integrates-k8s.yaml
    - kubectl apply -f integrates-k8s.yaml
    - kubectl rollout status deploy/integrates --timeout=5m ||
        { kubectl rollout undo deploy/integrates && exit 1; }
    - curl https://api.rollbar.com/api/1/deploy/
        -F access_token=$ROLLBAR_ACCESS_TOKEN
        -F environment=$FI_ROLLBAR_ENVIRONMENT
        -F revision=$CI_COMMIT_SHA
        -F local_username="$CI_COMMIT_REF_NAME"
    - vaultenv ./new_relic_deployment.sh
    - docker run
       -e VAULT_HOST="$VAULT_HOST"
       -e VAULT_TOKEN="$VAULT_TOKEN"
       -e VAULT_PORT="$VAULT_PORT"
       -t "$DOCKER_BASENAME:$CI_COMMIT_REF_NAME"
       /bin/bash -c "cd /usr/src/app/;
       vaultenv $(which python) integrates_version.py"
  after_script:
    - rm integrates-k8s.yaml
  only:
    - master

asserts-prod:
  stage: post-deploy
  before_script:
    - mkdir -p /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
    - cp -a ${CI_PROJECT_DIR} /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src
  script:
    - echo "$JFROG_PASS" |
        docker login fluid-docker.jfrog.io -u "$JFROG_USER" --password-stdin
    - docker pull fluid-docker.jfrog.io/fluid:integrates
    - docker run -t
        --rm -e ORG=fluid -e STAGE=post-deploy
        -e APP=integrates -e USER="$JFROG_USER"
        -e PASS="$JFROG_PASS" -e FA_STRICT="true"
        --volume /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}/src:/code
        fluid-docker.jfrog.io/fluid:integrates
    - docker logout fluid-docker.jfrog.io
  retry: 2
  after_script:
    - rm -rf /tmp${CI_PROJECT_DIR}/${CI_COMMIT_SHA}
  only:
    - master

coverage-report:
  only:
    - merge_requests
  stage: coverage
  image: fluid-docker.jfrog.io/integrates:deps190201
  <<: *variables-dev
  <<: *vault_login
  dependencies:
    - unit-testing
    - react-testing
  script:
    - vaultenv ./run_codecov.sh
  retry: 2
  except:
    - master
