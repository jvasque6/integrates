/* tslint:disable jsx-no-multiline-js
 * Disabling this rule is necessary for the sake of readability
 * of the code that renders/hides the component
 */
import _ from "lodash";
import React from "react";
import SyntaxHighlighter from "react-syntax-highlighter";
// tslint:disable-next-line no-submodule-imports
import { monokaiSublime } from "react-syntax-highlighter/styles/hljs";
import { InferableComponentEnhancer, lifecycle } from "recompose";
import { AnyAction, Reducer } from "redux";
import { ThunkDispatch } from "redux-thunk";
import { StateType } from "typesafe-actions";
import store from "../../../../store/index";
import reduxWrapper from "../../../../utils/reduxWrapper";
import * as actions from "../../actions";

export interface IExploitViewProps {
  code: string;
  findingId: string;
}

const enhance: InferableComponentEnhancer<{}> =
lifecycle({
  componentDidMount(): void {
    const { findingId } = this.props as IExploitViewProps;
    const thunkDispatch: ThunkDispatch<{}, {}, AnyAction> = (
      store.dispatch as ThunkDispatch<{}, {}, AnyAction>
    );

    thunkDispatch(actions.loadExploit(findingId));
  },
});

export const component: React.StatelessComponent<IExploitViewProps> =
  (props: IExploitViewProps): JSX.Element => (
  <React.StrictMode>
    { !_.isEmpty(props.code)
      ? <SyntaxHighlighter
          style={monokaiSublime}
          language="python"
          showLineNumbers={true}
          wrapLines={true}
      >
        {props.code}
      </SyntaxHighlighter>
      : undefined
    }
  </React.StrictMode>
);

export const exploitView: React.ComponentType<IExploitViewProps> = reduxWrapper(
  enhance(component) as React.SFC<IExploitViewProps>,
  (state: StateType<Reducer>): IExploitViewProps => ({
    ...state.dashboard.exploit,
  }),
);
