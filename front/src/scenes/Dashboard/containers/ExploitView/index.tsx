/* tslint:disable jsx-no-lambda
 * Disabling this rule is necessary for the sake of simplicity and
 * readability of the code that binds click events
 */

import mixpanel from "mixpanel-browser";
import React from "react";
import { Col, Glyphicon, Row } from "react-bootstrap";
import SyntaxHighlighter from "react-syntax-highlighter";
// tslint:disable-next-line no-submodule-imports
import { monokaiSublime } from "react-syntax-highlighter/styles/hljs";
import { InferableComponentEnhancer, lifecycle } from "recompose";
import { AnyAction, Reducer } from "redux";
import { ThunkDispatch } from "redux-thunk";
import { StateType } from "typesafe-actions";
import { Button } from "../../../../components/Button/index";
import { FluidIcon } from "../../../../components/FluidIcon";
import store from "../../../../store/index";
import reduxWrapper from "../../../../utils/reduxWrapper";
import translate from "../../../../utils/translations/translate";
import { isValidEvidenceFile } from "../../../../utils/validations";
import { fileInput as FileInput } from "../../components/FileInput/index";
import * as actions from "./actions";

export interface IExploitViewProps {
  canEdit: boolean;
  code: string;
  findingId: string;
  isEditing: boolean;
}

const enhance: InferableComponentEnhancer<{}> =
lifecycle({
  componentDidMount(): void {
    mixpanel.track(
      "FindingExploit",
      {
        Organization: (window as Window & { userOrganization: string }).userOrganization,
        User: (window as Window & { userName: string }).userName,
      });
    const { findingId } = this.props as IExploitViewProps;
    const thunkDispatch: ThunkDispatch<{}, {}, AnyAction> = (
      store.dispatch as ThunkDispatch<{}, {}, AnyAction>
    );

    thunkDispatch(actions.loadExploit(findingId));
  },
});

const updateExploit: ((arg1: string) => void) = (findingId: string): void => {

  if (isValidEvidenceFile("#evidence7")) {
    mixpanel.track(
      "UpdateExploit",
      {
        Organization: (window as Window & { userOrganization: string }).userOrganization,
        User: (window as Window & { userName: string }).userName,
      });
    const thunkDispatch: ThunkDispatch<{}, {}, AnyAction> = (
      store.dispatch as ThunkDispatch<{}, {}, AnyAction>
    );

    thunkDispatch(actions.updateExploit(findingId));
  }
};

const renderUploadField: ((arg1: IExploitViewProps) => JSX.Element) = (props: IExploitViewProps): JSX.Element => (
  <Row>
    <Col md={4} mdOffset={6} xs={12} sm={12}>
      <div>
        <FileInput fileName="evidence7[]" icon="search" id="evidence7" type=".py" visible={true}/>
      </div>
    </Col>
    <Col sm={2}>
      <Button
        bsStyle="primary"
        block={true}
        onClick={(): void => { updateExploit(props.findingId); }}
      >
        <Glyphicon glyph="cloud-upload"/>
        &nbsp;{translate.t("search_findings.tab_evidence.update")}
      </Button>
    </Col>
  </Row>
);

const renderEditPanel: ((arg1: IExploitViewProps) => JSX.Element) = (props: IExploitViewProps): JSX.Element => (
  <Row>
    <Row>
      <Col md={2} mdOffset={10} xs={12} sm={12}>
        <Button bsStyle="primary" block={true} onClick={(): void => { store.dispatch(actions.editExploit()); }}>
          <FluidIcon icon="edit" /> {translate.t("search_findings.tab_severity.editable")}
        </Button>
      </Col>
    </Row>
    <br />
    {props.isEditing ? renderUploadField(props) : undefined}
  </Row>
);

export const component: React.FunctionComponent<IExploitViewProps> =
  (props: IExploitViewProps): JSX.Element => (
  <React.StrictMode>
    {props.canEdit ? renderEditPanel(props) : undefined}
    <SyntaxHighlighter
      style={monokaiSublime}
      language="python"
      showLineNumbers={true}
      wrapLines={true}
    >
      {props.code}
    </SyntaxHighlighter>
  </React.StrictMode>
);

export const exploitView: React.ComponentType<IExploitViewProps> = reduxWrapper(
  enhance(component) as React.FC<IExploitViewProps>,
  (state: StateType<Reducer>): IExploitViewProps => ({
    ...state.dashboard.exploit,
  }),
);
